- include: networking.yml

- name: ensure service is registered with consul
  template:
    src: service.json.j2
    dest: /etc/consul.d/openvpn.json

- name: add keys to apt
  apt_key:
    url: "{{item}}"
    state: present
  with_items:
    - https://swupdate.openvpn.net/repos/repo-public.gpg

- name: add ppas to apt
  apt_repository:
    repo: "{{item}}"
    state: present
  with_items:
    - deb http://swupdate.openvpn.net/apt trusty main

- name: ensure apt packages are installed
  apt:
    name: "{{item}}"
    state: latest
    update_cache: yes
  with_items:
    - openvpn
    - awscli

- name: ensure easy-rsa has been downloaded
  unarchive:
    src: "{{ easy_rsa_tarball }}"
    dest: /mnt
    copy: no
  args:
    creates: /mnt/{{ easy_rsa_folder }}

- name: ensure easy-rsa has been installed
  shell: cp -R /mnt/{{ easy_rsa_folder }}/* {{ openvpn_path }}
  args:
    creates: "{{ openvpn_path }}/easyrsa"

- name: ensure easy-rsa vars have been configured
  template:
    src: vars.j2
    dest: "{{ openvpn_path }}/vars"

- name: ensure public key infrastructure is in place
  command: ./easyrsa init-pki
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ pki_path }}"

- name: ensure strong dhe parameter has been generated
  command: ./easyrsa gen-dh
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ pki_path }}/dh.pem"

- name: ensure ca has been created
  command: ./easyrsa build-ca nopass
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ pki_path }}/ca.crt"

- name: ensure cert request has been made for our server
  command: ./easyrsa gen-req server nopass
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ request_path }}/server.req"

- name: ensure cert request has been made for each user
  command: ./easyrsa gen-req {{ item.name }} nopass
  with_items: "{{ users }}"
  environment:
    EASYRSA_REQ_CN: "{{ item.real_name }}"
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ request_path }}/{{ item.name }}.req"

- name: ensure cert request has been signed for our server
  command: ./easyrsa sign server server
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ signed_path }}/server.crt"

- name: ensure cert request has been signed for each user
  command: ./easyrsa sign client {{ item.name }}
  with_items: "{{ users }}"
  args:
    chdir: "{{ openvpn_path }}"
    creates: "{{ signed_path }}/{{ item.name }}.crt"

- name: ensure hmac key exists
  command: openvpn --genkey --secret {{ hmac_key_path }}
  args:
    creates: "{{ hmac_key_path }}"

- name: register hmac key for use in ovpn configs
  command: cat ta.key
  args:
    chdir: "{{ pki_path }}"
  register: hmac_key_contents
  no_log: yes

- name: register ca cert for use in ovpn configs
  command: cat ca.crt
  args:
    chdir: "{{ pki_path }}"
  register: ca_contents
  no_log: yes

- name: register signed client certs for use in ovpn configs
  command: cat {{ item.name }}.crt
  args:
    chdir: "{{ signed_path }}"
  with_items: "{{ users }}"
  when: "{{ item.state == 'present' }}"
  register: client_certificates
  no_log: yes

- name: register client keys for use in ovpn configs
  command: cat {{ item.name }}.key
  args:
    chdir: "{{ key_path }}"
  with_items: "{{ users }}"
  when: "{{ item.state == 'present' }}"
  register: client_keys
  no_log: yes

- name: ensure client folders exists
  file:
    path: "{{clients_path}}/{{item.name}}"
    state: directory
  with_items: "{{ users }}"

- name: ensure client configuration files exist
  template:
    src: client.ovpn.j2
    dest: "{{ clients_path }}/{{ item.0.name }}/{{ fqdn }}.ovpn"
  with_together:
    - "{{ users }}"
    - "{{ client_certificates.results }}"
    - "{{ client_keys.results }}"
  when: "{{ item.0.state == 'present' }}"
  no_log: yes

- name: ensure eth0 ip is known
  setup:

- name: ensure openvpn is configured
  template:
    src: server.conf.j2
    dest: /etc/openvpn/server.conf

- name: ensure openvpn has been restarted
  service:
    name: openvpn
    state: restarted
